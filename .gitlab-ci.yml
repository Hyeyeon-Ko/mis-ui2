stages:
  - build
  - docker-build
  - docker-push
  - deploy

variables:
  # Docker 이미지 이름
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  DEPLOY_USER: root  # 배포할 사용자 이름
  DEPLOY_SERVER: 101.10.1.87  # 배포할 서버 IP 주소

before_script:
  - apk add --no-cache docker
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  
build:
  stage: build
  image: node:alpine
  script:
    - apk add --no-cache python3 make g++
    - npm install
    - npm run build
  tags:
    - mis-runner

docker-build:
  stage: docker-build
  image: docker:stable
  script:
    - echo "Docker build start!!"
    # Dockerfile로 Docker 이미지 빌드
    - docker build -t $DOCKER_IMAGE .
  tags:
    - mis-runner
  dependencies:
    - build

docker-push:
  stage: docker-push
  image: docker:stable
  script:
    - echo "Docker push start!!"
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    # Docker 이미지 푸시
    - docker push $DOCKER_IMAGE
  tags:
    - mis-runner
  dependencies:
    - docker-build

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    # 필요 시 배포 스크립트 작성
    - echo "Deploy step!!"
    # - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "docker-compose down && docker-compose pull && docker-compose up -d"
    - ssh user@101.10.1.87 "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD 101.10.1.100:5000 && 
        docker pull 101.10.1.100:5000/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME && 
        docker run -d --name my_container 101.10.1.100:5000/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
      "
  tags:
    - mis-runner
  dependencies:
    - docker-push